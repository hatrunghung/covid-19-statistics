{"version":3,"sources":["context/analytic/analyticReducer.js","context/analytic/initialState.js","context/AnalyticsContext.js","utils/formatDate.js","components/Header/Header.component.js","utils/client.js","api/endpoint.js","components/Indicator/Indicator.component.js","components/Card/Cards.component.js","api/criticalCaseEndpoint.js","components/GridIndicator/GridIndicator.component.js","components/LineChart/LineChart.component.js","components/Chart/Chart.component.js","components/AnalyticState.js","App.js","serviceWorker.js","index.js"],"names":["analyticsReducer","state","action","type","loading","confirmed","payload","deaths","recovered","lastUpdate","critical","countries","dailyData","error","initialState","AnalyticsStateContext","React","createContext","AnalyticsDispatchContext","AnalyticsProvider","children","useReducer","dispatch","Provider","value","useAnalyticsState","context","useContext","undefined","Error","useAnalyticsDispatch","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","Header","className","toDateString","client","endpoint","customConfig","config","method","window","fetch","then","response","json","Indicator","useEffect","data","catch","Row","style","marginRight","Col","md","fontSize","color","start","end","duration","separator","Cards","confirmedCriticalCase","reduce","accumulator","current","latest_data","textAlign","paddingLeft","paddingRight","fontWeight","GridIndicator","Fragment","LineChart","labels","map","reportDate","datasets","total","label","borderColor","fill","Chart","AnalyticsState","Container","App","AnalyticState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.298046f1.chunk.js","sourcesContent":["const analyticsReducer = (state, action) => {\n  switch (action.type) {\n    case 'loading': {\n      return {\n        ...state,\n        loading: true\n      }\n    }\n    case 'resolvedIndicate': {\n      return {\n        ...state,\n        confirmed: action.payload.confirmed,\n        deaths: action.payload.deaths,\n        recovered: action.payload.recovered,\n        lastUpdate: action.payload.lastUpdate,\n        loading: false,\n      }\n    }\n    case 'resolvedFetchMajorCase': {\n      return {\n        ...state,\n        critical: action.payload.critical\n      }\n    }\n    case 'resolvedCountries': {\n      return {\n        ...state,\n        countries: action.payload.countries\n      }\n    }\n    case 'resolvedDailyData': {\n      return {\n        ...state,\n        dailyData: action.payload.dailyData\n      }\n    }\n    case 'error': {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default analyticsReducer","const initialState = {\n  confirmed: 0,\n  deaths: 0,\n  recovered: 0,\n  lastUpdate: null,\n  countries: [],\n  dailyData: [],\n  critical: 0,\n  loading: false,\n  error: null\n}\n\nexport default initialState","import React from 'react'\nimport analyticsReducer from './analytic/analyticReducer'\nimport initialState from './analytic/initialState'\n\nconst AnalyticsStateContext = React.createContext()\nconst AnalyticsDispatchContext = React.createContext()\n\nconst AnalyticsProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(analyticsReducer, initialState)\n  return (\n    <AnalyticsStateContext.Provider value={state}>\n      <AnalyticsDispatchContext.Provider value={dispatch}>\n        {children}\n      </AnalyticsDispatchContext.Provider>\n    </AnalyticsStateContext.Provider>\n  )\n}\n\nconst useAnalyticsState = () => {\n  const context = React.useContext(AnalyticsStateContext)\n  if (context === undefined) {\n    throw new Error('useAnalyticsState must be used inside AnalyticsProvider')\n  }\n  return context\n}\n\nconst useAnalyticsDispatch = () => {\n  const context = React.useContext(AnalyticsDispatchContext)\n  if (context === undefined) {\n    throw new Error('useAnalyticsDispatch must be used inside AnalyticsProvider')\n  }\n  return context\n}\n\nexport { AnalyticsProvider, useAnalyticsState, useAnalyticsDispatch }","function formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n\n  if (month.length < 2)\n      month = '0' + month;\n  if (day.length < 2)\n      day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nexport default formatDate","import React from 'react'\nimport './Header.styles.scss'\nimport { useAnalyticsState } from '../../context/AnalyticsContext'\nimport formatDate from '../../utils/formatDate'\n\nfunction Header() {\n  const { lastUpdate } = useAnalyticsState()\n\n  return (\n    <div className=\"header\">\n      <div>\n        <p className=\"content-widget\">COVID-19 Monitor</p>\n      </div>\n      <div>\n        <p className=\"content-widget\">\n          Last update: { lastUpdate ? new Date(lastUpdate).toDateString() : formatDate(new Date())}\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Header","function client(endpoint, customConfig) {\n  const config = {\n    method: 'GET',\n    ...customConfig\n  }\n\n  return window.fetch(endpoint, config)\n    .then(response => response.json())\n}\n\nexport default client","export default 'https://covid19.mathdro.id/api'","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react'\nimport CountUp from 'react-countup'\nimport { Row, Col } from 'react-bootstrap'\nimport './Indicator.styles.scss'\nimport { useAnalyticsState, useAnalyticsDispatch } from '../../context/AnalyticsContext'\nimport client from '../../utils/client'\nimport endpoint from '../../api/endpoint'\n\nfunction Indicator () {\n  const { confirmed, deaths, recovered } = useAnalyticsState()\n  const dispatch = useAnalyticsDispatch()\n\n  useEffect(() => {\n    dispatch({ type: 'loading' })\n\n    client(endpoint).then(data => dispatch({\n      type: 'resolvedIndicate',\n      payload: {\n        confirmed: data.confirmed.value,\n        deaths: data.deaths.value,\n        recovered: data.recovered.value,\n        lastUpdate: data.lastUpdate\n      }\n    })).catch(error => dispatch({\n      type: 'error',\n      payload: { error }\n    }))\n  }, [])\n\n  return (\n    confirmed && <Row style={{ marginRight: '-5px' }}>\n      <Col md={4}>\n        <div className=\"grid-col\">\n          <div style={{ fontSize: 20 }}>Confirmed cases</div>\n          <h2 style={{ color: 'rgb(189, 33, 48)' }}>\n            <CountUp start={0} end={confirmed} duration={2} separator='.' />\n          </h2>\n        </div>\n      </Col>\n      <Col md={4}>\n        <div className=\"grid-col\">\n          <div style={{ fontSize: 20 }}>Deaths</div>\n          <h2 style={{ color: 'rgb(189, 189, 189)' }}>\n            <CountUp start={0} end={deaths} duration={2} separator='.' />\n          </h2>\n        </div>\n      </Col>\n      <Col md={4}>\n        <div className=\"grid-col\">\n          <div style={{ fontSize: 20 }}>Recovered</div>\n          <h2 style={{ color: 'rgb(164, 201, 57)' }}>\n            <CountUp start={0} end={recovered} duration={2} separator='.' />\n          </h2>\n        </div>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Indicator","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react'\nimport CountUp from 'react-countup'\nimport { Row, Col } from 'react-bootstrap'\nimport { useAnalyticsState, useAnalyticsDispatch } from '../../context/AnalyticsContext'\nimport client from '../../utils/client'\nimport criticalCaseEndpoint from '../../api/criticalCaseEndpoint'\n\nfunction Cards() {\n  const { confirmed, deaths, recovered, critical } = useAnalyticsState()\n  const dispatch = useAnalyticsDispatch()\n\n  useEffect(() => {\n    client(criticalCaseEndpoint).then(response => {\n      const confirmedCriticalCase = response.data.reduce((accumulator, current) => accumulator + current.latest_data.critical, 0)\n      return dispatch({\n        type: 'resolvedFetchMajorCase',\n        payload: {\n          critical: confirmedCriticalCase\n        }\n      })\n    })\n    .catch(error => dispatch({\n      type: 'error',\n      payload: { error }\n    }))\n  }, [])\n\n  return (\n    <Row style={{ marginRight: '-15px' }}>\n      <Col md={6} style={{\n        textAlign: 'center',\n        paddingLeft: 0,\n        paddingRight: 0\n      }}>\n        <div className=\"cases-indicator\">\n          <div className=\"grid-col\">\n            <div style={{ fontSize: 20 }}>Active cases:</div>\n            <div>\n              <h2 style={{ color: 'rgb(255,255,255)' }}>\n                <CountUp start={0} end={confirmed - deaths - recovered} duration={2} separator='.' />\n              </h2>\n              <div>Currently infected patients</div>\n            </div>\n            <div className=\"detail-card-container\">\n              <div>\n                <span style={{\n                  fontSize: 20,\n                  fontWeight: 'bold',\n                  color: 'rgb(218, 78, 91)'\n                }}>\n                  <CountUp start={0} end={confirmed - deaths - recovered - critical} duration={2} separator='.' />\n                </span>\n                <br />\n                Mildly infected cases\n              </div>\n              <div>\n                <span style={{\n                  fontSize: 20,\n                  fontWeight: 'bold',\n                  color: 'rgb(189, 33, 48)'\n                }}>\n                  <CountUp start={0} end={critical} duration={2} separator='.' />\n                </span>\n                <br />\n                Seriously infected cases\n              </div>\n            </div>\n          </div>\n        </div>\n      </Col>\n      <Col md={6} style={{\n        textAlign: 'center',\n        paddingLeft: 0,\n        paddingRight: 0\n      }}>\n        <div className=\"cases-indicator\">\n          <div className=\"grid-col\">\n            <div style={{ fontSize: 20 }}>Close cases:</div>\n            <div>\n              <h2 style={{ color: 'rgb(255,255,255)' }}>\n                <CountUp start={0} end={deaths + recovered} duration={2} separator='.' />\n              </h2>\n              <div>Currently closed cases</div>\n            </div>\n            <div className=\"detail-card-container\">\n              <div>\n                <span style={{\n                  fontSize: 20,\n                  fontWeight: 'bold',\n                  color: 'rgb(164, 201, 57)'\n                }}>\n                  <CountUp start={0} end={recovered} duration={2} separator='.' />\n                </span>\n                <br />\n                Recovered / Discharged\n              </div>\n              <div>\n                <span style={{\n                  fontSize: 20,\n                  fontWeight: 'bold',\n                  color: 'rgb(189, 189, 189)'\n                }}>\n                  <CountUp start={0} end={deaths} duration={2} separator='.' />\n                </span>\n                <br />\n                Deaths\n              </div>\n            </div>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Cards","export default 'https://corona-api.com/countries'","import React from 'react'\nimport Indicator from '../Indicator/Indicator.component'\nimport './GridIndicator.styles.scss'\nimport Cards from '../Card/Cards.component'\n\nfunction GridIndicator() {\n  return (\n    <React.Fragment>\n      <Indicator />\n      <Cards />\n    </React.Fragment>\n  )\n}\n\nexport default GridIndicator","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { useAnalyticsDispatch, useAnalyticsState } from '../../context/AnalyticsContext'\nimport endpoint from '../../api/endpoint'\nimport client from '../../utils/client'\n\nfunction LineChart() {\n  const { dailyData } = useAnalyticsState()\n  const dispatch = useAnalyticsDispatch()\n\n  React.useEffect(() => {\n    client(endpoint + '/daily').then(data => dispatch({\n      type: 'resolvedDailyData',\n      payload: {\n        dailyData: data\n      }\n    }))\n  }, [])\n\n  return (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [{\n          data: dailyData.map(data => data.confirmed.total),\n          label: 'Confirmed',\n          borderColor: 'rgb(189, 33, 48)',\n          fill: true\n        }, {\n          data: dailyData.map(data => data.deaths.total),\n          label: 'Deaths',\n          borderColor: 'rgb(189, 189, 189)',\n          fill: true\n        }, {\n          data: dailyData.map(data => data.recovered.total),\n          label: 'Recovered',\n          borderColor: 'rgb(164, 201, 57)',\n          fill: true\n        }]\n      }}\n    />\n  )\n}\n\nexport default LineChart","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react'\nimport { useAnalyticsDispatch } from '../../context/AnalyticsContext'\nimport client from '../../utils/client'\nimport endpoint from '../../api/endpoint'\nimport './Chart.styles.scss'\nimport LineChart from '../LineChart/LineChart.component'\n\nfunction Chart() {\n  const dispatch = useAnalyticsDispatch()\n\n  React.useEffect(() => {\n    client(endpoint + '/countries').then(data => dispatch({\n      type: 'resolvedCountries',\n      payload: {\n        countries: data.countries\n      }\n    }))\n  }, [])\n\n  return (\n    <div className=\"chart-container\">\n      <LineChart />\n    </div>\n  )\n}\n\nexport default Chart","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react'\nimport { Container } from 'react-bootstrap'\nimport GridIndicator from './GridIndicator/GridIndicator.component'\nimport Chart from './Chart/Chart.component'\n\nfunction AnalyticsState() {\n  return (\n    <Container>\n      <GridIndicator />\n      <Chart />\n    </Container>\n  )\n}\n\nexport default AnalyticsState","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport './App.css';\n\nimport { AnalyticsProvider } from './context/AnalyticsContext'\nimport Header from './components/Header/Header.component';\nimport AnalyticState from './components/AnalyticState'\n\nfunction App() {\n  return (\n    <AnalyticsProvider>\n      <div className=\"App\">\n        <Header />\n        <AnalyticState />\n      </div>\n    </AnalyticsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}